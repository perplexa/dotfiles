[push]
    default = matching
    followTags = true

[help]
    autocorrect = 0

[core]
    excludesfile = ~/.gitignore

    # safer `git rebase` on osx
    # http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
    trustctime = false

    # fix files, which's names contain non-ASCII symbols showing as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

[merge]
    conflictStyle = diff3

[alias]
    # short graph log alias
    l = "log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"

    # graph log alias
    ll = "log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"

    # status
    s = "status"

    # push all local heads to origin
    ph = "push --force --tags origin 'refs/heads/*'"

    # delete last commit (many with e.g. HEAD~2 for 2 commits)
    dc = "reset --hard HEAD^"

    # edit last commit
    elc = "commit --amend"

    # delete merged branches
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # delete remote ref
    dr = "!d() { git push origin --delete $1; }; d"

    # find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # set head to current branch and push
    p = "!f() { git push origin $(git rev-parse --abbrev-ref HEAD); }; f"

    # switch to branch; create if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; git branch --set-upstream-to=\"origin/$1\" \"$1\"; }; f"

    # fetch remote changes and fast-forward merge, otherwise rebase
    up = "!git fetch && (git merge --ff-only || git rebase --rebase-merges)"

    # squash the specified number of commits into a single new commit
    sq = "!git reset --soft HEAD~$1 && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\""

    # git change-commits GIT_AUTHOR_NAME "old name" "new name"
    # change commit history, see https://stackoverflow.com/questions/2919878/git-rewrite-previous-commit-usernames-and-emails
    change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "

# color settings
[color]
    branch = auto
    diff = auto
    status = auto
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]
    added = green
    changed = yellow
    untracked = red

[diff "sopsdiffer"]
    textconv = sops -d

[commit]
    gpgsign = true

[user]
    signingkey = 85E1A06E59891650

