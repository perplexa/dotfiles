scriptencoding utf-8
" ^^ please leave the above line at the start of the file.

" basic setup
syntax on
filetype plugin indent on

" defaults
set ttyfast
set number
set modelines=0
set nocompatible
set cursorline
set lazyredraw

" tabs
"set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

" ctrl+N/P for buffer navigation
set hidden
nnoremap <C-n> :bnext<CR>
nnoremap <C-p> :bprev<CR>

" proper regex handling for search
nnoremap / /\v
vnoremap / /\v

" delete does not copy
nnoremap d "_d
vnoremap d "_d

" use system-wide clipboard
set clipboard=unnamed

" enable the mouse and xterm style keys
set mouse+=a
if &term =~ '^screen'
  set ttymouse=xterm2
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
  map <Esc>[B <Down>
endif

" allow 256 color themes
set t_Co=256

" change leader to ,
let mapleader=','

" remap ; to :
nnoremap ; :

" match brackets with <tab>
nnoremap <tab> %
vnoremap <tab> %

" search
set gdefault
set incsearch
set showmatch
set hlsearch
set ignorecase
set smartcase
nnoremap <leader><space> :noh<cr>

" textmate style whitespaces
set list
set listchars=tab:▸\ ,eol:¬

" autosave
" au FocusLost * :wa

" persistent undo
set undodir=~/.vim/undodir
set undofile

" swap files
set dir=~/.vim/swap
set swapfile

" move viminfo to ~/.vim/viminfo
set viminfo='100,n~/.vim/viminfo

" remove trailing whitespaces on save
"autocmd BufWritePre * :%s/\s\+$//e

" replace trailing whitespaces with <leader>ss
" see http://vim.wikia.com/wiki/Remove_unwanted_spaces
nnoremap <silent><leader>ss :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" save file as root
command W :w !sudo tee % > /dev/null

" START OF PLUGIN CONFIGURATION
" lightline
set noshowmode

function! LightlineModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ expand('%:t') =~ 'NERD_tree' ? '' :
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|NERD' && &ft !~? 'head' && exists('*fugitive#head')
      let mark = "⇅ "
      let branch = fugitive#head()
      return branch !=# '' ? mark.branch : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return expand('%:t') =~ 'NERD_tree' ? 'NERDTree' : winwidth(0) > 60 ? lightline#mode() : ''
endfunction

let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'mode_map': { 'c': 'NORMAL' },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'LightlineModified',
      \   'readonly': 'LightlineReadonly',
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode',
      \ },
      \ 'separator': { 'left': "", 'right': "" },
      \ 'subseparator': { 'left': "|", 'right': "|" }
      \ }

" NERDTree
map <C-k> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
let NERDTreeMinimalUI=1
let NERDTreeWinSize=30
let NERDTreeHijackNetrw=0
" autocmd vimenter * if !argc() | NERDTree | endif
autocmd vimenter * NERDTree
autocmd vimenter * wincmd p " select previous window after spawning nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif " quit if only nerdtree is only win

let NERDTreeIgnore=['\~$', '\.swp$', '\.pyc$', '^__pycache__$']
" let g:NERDTreeDirArrows=0

" Terraform
let g:terraform_fmt_on_save=1

" theme
syntax enable
au syntax * syntax sync fromstart
set background=dark
colorscheme gruvbox

" tabular
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" rainbow parentheses config
let g:rainbow_active=1
let g:rainbow_conf={
\ 'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\ 'ctermfgs': ['darkblue', 'darkgrey', 'darkmagenta', 'darkcyan'],
\ 'operators': '_,_',
\ 'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
\ 'separately': {
\   '*': {},
\   'clojure': {
\     'ctermfgs': ['darkblue', 'darkgrey', 'darkmagenta', 'darkcyan', 'darkred', 'darkgreen'],
\   },
\   'markdown': {
\     'parentheses_options': 'containedin=markdownCode contained',
\   },
\   'vim': {
\     'parentheses': [['fu\w* \s*.*)','endfu\w*'], ['for','endfor'], ['while', 'endwhile'], ['if','_elseif\|else_','endif'], ['(',')'], ['\[','\]'], ['{','}']],
\   },
\   'tex': {
\     'parentheses': [['(',')'], ['\[','\]'], ['\\begin{.*}','\\end{.*}']],
\   },
\   'css': 0,
\   'nerdtree': 0,
\   'stylus': 0,
\   }
\}

