# send cmd+shift+a to MacPass and get a 2FA token from oathtool
2fa() {
  if [ -n "$1" ]; then
    setopt local_options no_notify no_monitor
    echo "Sending \u2318 + \u21e7 + a"
    sleep 0.05
    echo -ne "\033]0;"$1-totp"\007"
    osascript -e 'tell application "System Events" to keystroke "a" using {command down, shift down}'
    read -s secret
    token=$(oathtool --totp -b "$secret")
    echo "Copying token to clipboard: $token"
    echo -n $token | pbcopy
    echo "Erasing clipboard in 10 seconds."
    ( sleep 10; pbcopy </dev/null ) &
    disown &>/dev/null
  fi
}

# use ffmpeg to extract an audio track from a container
audiotrack() {
  if [ -e "$1" ]; then
    local ext="$(ffprobe -loglevel quiet -show_entries stream=index,codec_name,codec_type -of compact -i "$1" | grep 'codec_type=audio' | sed 's/.*codec_name=\([a-z0-9]*\).*/\1/')"
    local filename="$(basename "$1" | sed 's/[^\.]*$//')"
    filename+="$ext"
    ffmpeg -i "$1" -vn -acodec copy "$filename"
  else
    echo "Invalid file parameter. Usage: $0 media-file"
  fi
}

# calculate a blob hash in git object-hash fashion
blob-hash() { printf "blob ${#1}\0${1}" | shasum | awk '{print $1}' }

# calculator
calc() {
    local result=""
    result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
    if [[ "$result" == *.* ]]; then
        printf "$result" | sed -e 's/^\./0./;s/^-\./-0./;s/0*$//;s/\.$//'
    else
        printf "$result"
    fi;
    printf "\n"
}

# change working directory to the top-most finder window path
cdf() {
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# open url in chrome incognito tab and bring to front
chrome-incognito() {
  '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome' --incognito -- "$1"
  osascript -e 'tell application "Google Chrome" to activate'
}

firefox-incognito() {
  "/Applications/Firefox Nightly.app/Contents/MacOS/firefox" -private-window "$1"
}

# create a data URL from a file
dataurl() {
    local mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# imgur upload. API key: http://imgur.com/register/api_anon
imgur() {
  curl -F "image=@${1:--}" -H "Authorization: Client-ID ${IMGUR_API_TOKEN}" https://api.imgur.com/3/image | sed 's/\\//g' | egrep -o 'https?:[^"]+' | tee >(pbcopy)
}

# convert markdown to html using pandoc
md2html() {
  local filename="$(basename "$1" | sed 's/[^\.]\+$/html/')"
  pandoc --from=markdown --to=html --output="$filename" "$1"
}

# add more dirs to $PATH
pathadd() {
  [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]] && PATH="$1${PATH:+":$PATH"}"
}

# ptpb.pw paste
pb() {
  curl -sF "c=@${1:--}" -F p=1 -F sunset=3600 -w '%{redirect_url}' 'https://ptpb.pw/?r=1' -o /dev/stderr | pbcopy
}

pbd() {
  curl -X DELETE "https://ptpb.pw/$1"
}

# rebuild osx icon cache
rebuild-icons() {
  sudo find /private/var/folders/ -name com.apple.dock.iconcache -print0 | xargs -0 rm -rf
  sudo find /private/var/folders/ -name com.apple.iconservices -print0 | xargs -0 rm -rf
  sudo rm -rf /Library/Caches/com.apple.iconservices.store
  killall Finder
  killall Dock
}

# creates or reattaches to a named screen session based on the application name
screenify() {
  screen -dmSADRU $1 $@;
}

# start a http server from a directory, optionally specifying the port
server() {
    local port="${1:-8000}"
    sleep 1 && open "http://localhost:${port}/" &
    python -c $'import SimpleHTTPServer;\nm = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nm[""] = "text/plain";\nfor k, v in m.items():\n\tm[k]=v+";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# shrink a file or directory
shrink() {
  [ -n "$*" ] && tar --xz -cvf "$1.tar.xz" "$@"
}

# get currently playing spotify track
spotify() {
  osascript -e 'tell app "Spotify" to if (player state is playing) then "np: " & (get artist of current track) & " - " & (get name of current track) & " - " & (get id of current track)' | sed 's!spotify:track:\([0-z]*\)!https://open.spotify.com/track/\1!' | tee /dev/tty | pbcopy
}

# creates or reattaches to a named tmux session based on the application name
tmuxify() {
  tmux attach-session -t $1 2>/dev/null || tmux new-session -s $1 "$@"
}

# webm converter (vp8, no sound)
wobble() {
  if [ -e "$1" ]; then
    # target size in bytes
    local targetsize=8388608
    local duration="$(ffprobe -loglevel quiet -show_entries format=duration -of compact -i "$1" | cut -d= -f2)"
    local filename="$(basename "$1" | sed 's/[^\.]\+$/webm/')"
    # convert size from KB to Kbit, use 5% overhead buffer
    local bitrate="$(printf "scale=10; $targetsize * 8 * 0.95 / $duration\n" | bc --mathlib)"
    ffmpeg -i "$1" -c:v libvpx -b:v "$bitrate" -crf 33 -threads 8 -speed 4 -auto-alt-ref 1 -lag-in-frames 25 -an -f webm "$filename"
  else
    echo "Invalid file parameter. Usage: $0 media-file"
  fi
}
